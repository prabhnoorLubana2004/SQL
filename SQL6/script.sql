-- Drop tables in reverse order with CASCADE option
DROP TABLE Wishlist CASCADE CONSTRAINTS;
DROP TABLE Rental CASCADE CONSTRAINTS;
DROP TABLE ActorMovie CASCADE CONSTRAINTS;
DROP TABLE ActorActress CASCADE CONSTRAINTS;
DROP TABLE Director CASCADE CONSTRAINTS;
DROP TABLE Movie CASCADE CONSTRAINTS;
DROP TABLE Category CASCADE CONSTRAINTS;
DROP TABLE Advisory CASCADE CONSTRAINTS;
DROP TABLE Customer CASCADE CONSTRAINTS;

-- Create tables in order (parents first and then children)

-- Create Category table
CREATE TABLE Category (
    category_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    category_name VARCHAR2(50) NOT NULL,
    parent_category_id NUMBER,
    CONSTRAINT pk_category PRIMARY KEY (category_id),
    CONSTRAINT fk_parent_category FOREIGN KEY (parent_category_id) REFERENCES Category(category_id)
);

-- Create Advisory table
CREATE TABLE Advisory (
    advisory_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    short_description VARCHAR2(100) NOT NULL,
    full_description VARCHAR2(500) NOT NULL,
    CONSTRAINT pk_advisory PRIMARY KEY (advisory_id)
);

-- Create Movie table
CREATE TABLE Movie (
    movie_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    title VARCHAR2(100) NOT NULL,
    duration_in_minutes NUMBER NOT NULL CHECK (duration_in_minutes > 0),
    is_new_release NUMBER(1) DEFAULT 0,
    is_most_popular NUMBER(1) DEFAULT 0,
    is_coming_soon NUMBER(1) DEFAULT 0,
    sd_price NUMBER(6,2) NOT NULL,
    hd_price NUMBER(6,2) NOT NULL,
    rating VARCHAR2(10) CHECK (rating IN ('G', 'PG', '14A', '18A', 'R')),
    CONSTRAINT pk_movie PRIMARY KEY (movie_id)
);

-- Create ActorActress table
CREATE TABLE ActorActress (
    actor_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    date_of_birth DATE NOT NULL,
    email_address VARCHAR2(100) UNIQUE NOT NULL,
    CONSTRAINT pk_actor PRIMARY KEY (actor_id)
);

-- Create Director table
CREATE TABLE Director (
    director_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    date_of_birth DATE NOT NULL,
    email_address VARCHAR2(100) UNIQUE NOT NULL,
    CONSTRAINT pk_director PRIMARY KEY (director_id)
);

-- Create ActorMovie table
CREATE TABLE ActorMovie (
    actor_id NUMBER,
    movie_id NUMBER,
    role_name VARCHAR2(100),
    CONSTRAINT pk_actor_movie PRIMARY KEY (actor_id, movie_id),
    CONSTRAINT fk_actor FOREIGN KEY (actor_id) REFERENCES ActorActress(actor_id),
    CONSTRAINT fk_movie FOREIGN KEY (movie_id) REFERENCES Movie(movie_id)
);

-- Create Customer table
CREATE TABLE Customer (
    customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name VARCHAR2(50) NOT NULL,
    surname VARCHAR2(50) NOT NULL,
    email_address VARCHAR2(100) UNIQUE NOT NULL,
    credit_card_number VARCHAR2(16) CHECK (REGEXP_LIKE(credit_card_number, '^[0-9]{16}$')),
    credit_card_type VARCHAR2(2) CHECK (credit_card_type IN ('AX', 'MC', 'VS')),
    full_address VARCHAR2(500) NOT NULL,
    postal_code VARCHAR2(7) CHECK (REGEXP_LIKE(postal_code, '^[A-Za-z]\d[A-Za-z]\d[A-Za-z]\d$')),
    phone_number VARCHAR2(12) CHECK (REGEXP_LIKE(phone_number, '^\d{3}\.\d{3}\.\d{4}$')),
    CONSTRAINT pk_customer PRIMARY KEY (customer_id)
);

-- Create Rental table
CREATE TABLE Rental (
    rental_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    customer_id NUMBER,
    movie_id NUMBER,
    rental_date DATE NOT NULL,
    start_viewing_date DATE NOT NULL,
    expiry_date DATE NOT NULL,
    amount_paid NUMBER(6,2) NOT NULL,
    credit_card_charged VARCHAR2(16) CHECK (REGEXP_LIKE(credit_card_charged, '^[0-9]{16}$')),
    credit_card_type VARCHAR2(2) CHECK (credit_card_type IN ('AX', 'MC', 'VS')),
    customer_rating NUMBER(1,5),
    CONSTRAINT pk_rental PRIMARY KEY (rental_id),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    CONSTRAINT fk_movie_rental FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    CONSTRAINT chk_expiry_date CHECK (expiry_date > start_viewing_date),
    CONSTRAINT chk_start_viewing_date CHECK (start_viewing_date > rental_date)
);

-- Create Wishlist table
CREATE TABLE Wishlist (
    customer_id NUMBER,
    movie_id NUMBER,
    added_date DATE NOT NULL,
    CONSTRAINT pk_wishlist PRIMARY KEY (customer_id, movie_id),
    CONSTRAINT fk_customer_wishlist FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    CONSTRAINT fk_movie_wishlist FOREIGN KEY (movie_id) REFERENCES Movie(movie_id)
);
